using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ApplicationBlocks.Data;

namespace TricareManagementSystem.DataAccess
{   
    
    class DataBaseHelper : DataAccessBase
    {
        /// <summary>
        /// Its an array of SqlParameters needed to execute Sql query
        /// </summary>
        public SqlParameter[] Parameters { get; set; }
        /// <summary>
        /// This is a parameterized Constructor for setting the Stored Procedure 
        /// </summary>
        /// <param name="storedProcedureName">Identifying the specific Stored Procedure</param>
        public DataBaseHelper(string storedProcedureName)
        {
            StoredProcedureName = storedProcedureName;
        }
        /// <summary>
        ///Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
        /// using the provided parameters
        /// </summary>
        /// <returns>An boolean representing Successful execution of the Query</returns>
        public bool ExcecuteNonQuery()
        {

            int result = SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure,
                                      StoredProcedureName, Parameters);
            if (result > 0)
                return true;
            return false;
        }
        /// <summary>
        ///  Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
        /// using the provided parameters
        /// </summary>
        /// <param name="parameters">An array of SqlParamters used to execute the command</param>  
        /// <returns>An int representing the number of rows affected by the command</returns>
        public int ExcecuteNonQuery(SqlParameter parameters)
        {

            int result = SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure,
                                      StoredProcedureName, parameters);
            return result;
        }
        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
        /// using the provided parameters.
        /// </summary>
        /// <returns>A SqlDataReader containing the resultset generated by the command</returns>
        public SqlDataReader ExcecuteReaderQuery()
        {
            SqlDataReader dataReaderObject;
            dataReaderObject = SqlHelper.ExecuteReader(base.ConnectionString,
                                        CommandType.StoredProcedure,
                                        StoredProcedureName, Parameters);
            return dataReaderObject;
        }
        /// <summary>
        /// Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
        /// using the provided parameters.
        /// </summary>
        /// <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        public object ExcecuteScalarQuery()
        {
            return SqlHelper.ExecuteScalar(base.ConnectionString,CommandType.StoredProcedure,
                                        StoredProcedureName, Parameters);
        }
        /// <summary>
        ///  Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
        /// the connection string. 
        /// </summary>
        /// <param name="connectionstring">A valid connection string for a SqlConnection</param>
        /// <returns>A dataset containing the resultset generated by the command</returns>
        public DataSet ExcecuteQuery(string connectionstring)
        {
            DataSet dataSetObjct;
            dataSetObjct = SqlHelper.ExecuteDataset(connectionstring, CommandType.StoredProcedure, StoredProcedureName);
            return dataSetObjct;
        }
        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
        /// the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <param name="connectionstring">A valid connection string for a SqlConnection</param>
        /// <param name="parameters">An array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>A dataset containing the resultset generated by the command</param>
        /// <returns></returns>
        public DataSet ExcecuteQuery(string connectionstring, SqlParameter[] parameters)
        {
            DataSet dataSetObjct;
            dataSetObjct = SqlHelper.ExecuteDataset(connectionstring, StoredProcedureName, parameters);
            return dataSetObjct;
        }





        //public bool ExcecuteQuery()
        //{

        //    int result = SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure,
        //                              StoredProcedureName, Parameters);
        //    if (result > 0)
        //        return true;
        //    return false;
        //}


        //public SqlDataReader ExcecuteQuery(SqlParameter[] parameters)
        //{
        //    SqlDataReader dataReaderObject;
        //    dataReaderObject = SqlHelper.ExecuteReader(base.ConnectionString,
        //                                CommandType.StoredProcedure,
        //                                StoredProcedureName,
        //                                parameters);
        //    return dataReaderObject;
        //}
        //public object ExcecuteScalarQuery(SqlTransaction transaction, SqlParameter[] parameters)
        //{
        //    return SqlHelper.ExecuteScalar(transaction, StoredProcedureName, parameters);
        //}
    }
}
